////
/// use this to do some epic svg manipulation
/// @author Matthias MÃ¼ller
/// @group sassvg
////

/// default color, if the sassvg() mixin gets no color parameter
/// you may redefine this value multiple times in your project (before including the mixin)
/// @type {color}
/// @example 
/// $sassvg--color-default
$sassvg--color-default: #000;

@import "sassvg-data";

/// returns an uri-encoded color value
/// if possible, the color is reduced to rgb, otherwise rgba
/// @return {color} (uri-encoded)
@function uri-encode-color($color){
	@if(alpha($color) != 1){
		@return "rgba%28" + round(red($color)) + "%2C" + round(green($color)) + "%2C" + round(blue($color)) + "%2C" + round(alpha($color)) + "%29";
	}@else{
		@return "rgb%28" + round(red($color)) + "%2C" + round(green($color)) + "%2C" + round(blue($color)) + "%29";
	}
}


/// creates a dynamic svg, e.g. colored
///
/// @param {filename} $icon - name of the @include icon
/// @param {color} $color - used for fill and stroke (if present) attributes
/// @param {color} $fillcolor - explicitly used only for fill attributes
/// @param {color} $strokecolor - explicitly used only for stroke attributes (if present)
/// @param {decimalNumber} $opacity - opacity of the svg (NOT the opacity of the element)
/// @param {uri escaped String} $extrastyles - expert option, may be used to insert style attributes, this currently needs to be an uri-escaped value, or it won't work in IE !!!!
///
/// @throws exception if units are wrong/missing
/// @require {variable} $sassvg--color-default
/// @require {function} uri-encode-color
///
/// @example
/// 	background-image: sassvg("iconname", blue);
/// 	background-image: sassvg("facebook", #FFAFF ); 
/// 	background-image: sassvg("arrow-left", rgba(224, 51, 224, 0.79)); 
///
/// @return {image} - (as data-string)
@function sassvg(
	$icon, 
	$color: $sassvg--color-default, 
	$fillcolor: $color,
	$strokecolor: $color, 
	$opacity: 1,
	$extrastyles: ""
){
	@if($opacity != 1){
	$extrastyles: "opacity%3A" + $opacity + "%3B" + $extrastyles
	}

	$fillcolor: uri-encode-color($fillcolor);
	$strokecolor: uri-encode-color($strokecolor);
	$functionname: "sassvg-" + $icon;

	//some sanity checks
	@if(type-of($icon) != "string" or type-of($color) != "color" or function-exists($functionname) == false){
		@warn "wrong parameter(s) for mixin 'icon'. The first one needs to be a string with the fileName of the svg (without extension)";
	}@else{
		@return call($functionname, $fillcolor, $strokecolor, $extrastyles);
	}

}

/// returns all sassvg-ed icons, optionally filtered by their folder
@function sassvg-list($folder: null){
	$iconlist: ();
	@each $key in map-keys($sassvg){

		@if(map-get(map-get($sassvg, $key), 'folder') == $folder){
      $iconlist: append($iconlist, unquote(map-get(map-get($sassvg, $key), 'name')));
		}
	}
	@return $iconlist;
}
