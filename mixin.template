/// use this to do some epic svg manipulation
/// @author Matthias MÃ¼ller
$sassvg--color-default: #000;

/// @todo we might remove the rgb output as SVG browser all support rgba, right?
@function uri-encode-color($color){
	@if(alpha($color) != 1){
		@return "rgba%28" + round(red($color)) + "%2C" + round(green($color)) + "%2C" + round(blue($color)) + "%2C" + round(alpha($color)) + "%29";
	}@else{
		@return "rgb%28" + round(red($color)) + "%2C" + round(green($color)) + "%2C" + round(blue($color)) + "%29";
	}
}




@mixin icon(
    $icon, 
    $color: $sassvg--color-default, 
    $background-position: 0 50%,
    $background-repeat: no-repeat,
	$fillcolor: $color,
    $strokecolor: $color, 
    $opacity: 1,
    $extrastyles: ""
){

@if($opacity != 1){
    $extrastyles: "opacity:" + $opacity + ";" + $extrastyles
}

$fillcolor: uri-encode-color($fillcolor);


$icon--map: (#####REPLACED#####
);
    
    //some sanity checks
    @if(type-of($icon) != "string" or type-of($color) != "color" or map-has-key($icon--map, $icon) == false){
        @warn "wrong parameter(s) for mixin 'icon'. The first one needs to be a string with the fileName of the svg (without extension)";
    }@else{
        $icon-data: map-get(map-get($icon--map, $icon), 'data');
        background-image: url($icon-data);
        background-position: $background-position;
        background-repeat: $background-repeat;
    }
}

/// returns all sassvg-ed icons, optionally filtered by their folder
@function icon-list($folder: null){
	$iconlist: "";
	@each $submap in map-keys($sassvg){
		@if(map-get($submap, "folder") == $folder){
			append($iconlist, map-get($submap, "name"));
		}
	}
	@return $iconlist;
}